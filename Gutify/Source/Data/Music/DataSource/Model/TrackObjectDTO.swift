//
// TrackObjectDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct TrackObjectDTO: Codable, JSONEncodable, Hashable {

    public enum TypeDTO: String, Codable, CaseIterable {
        case track = "track"
    }
    /** The album on which the track appears. The album object includes a link in href to full information about the album. */
    public var album: SimplifiedAlbumObjectDTO
    /** The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.  */
    public var artists: [ArtistObjectDTO]
    /** A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.  */
    public var availableMarkets: [String]?
    /** The disc number (usually `1` unless the album consists of more than one disc).  */
    public var discNumber: Int?
    /** The track length in milliseconds.  */
    public var durationMs: Int?
    /** Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).  */
    public var explicit: Bool?
    /** A link to the Web API endpoint providing full details of the track.  */
    public var href: String?
    /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.  */
    public var id: String
    /** Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.  */
    public var isPlayable: Bool?
    /** The name of the track.  */
    public var name: String
    /** The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._  */
    public var popularity: Int?
    /** A link to a 30 second preview (MP3 format) of the track. Can be `null`  */
    public var previewUrl: String?
    /** The number of the track. If an album has several discs, the track number is the number on the specified disc.  */
    public var trackNumber: Int?
    /** The object type: \"track\".  */
    public var type: TypeDTO?
    /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.  */
    public var uri: String?
    /** Whether or not the track is from a local file.  */
    public var isLocal: Bool?

    public init(album: SimplifiedAlbumObjectDTO, artists: [ArtistObjectDTO], availableMarkets: [String]? = nil, discNumber: Int? = nil, durationMs: Int? = nil, explicit: Bool? = nil, href: String? = nil, id: String, isPlayable: Bool? = nil, name: String, popularity: Int? = nil, previewUrl: String? = nil, trackNumber: Int? = nil, type: TypeDTO? = nil, uri: String? = nil, isLocal: Bool? = nil) {
        self.album = album
        self.artists = artists
        self.availableMarkets = availableMarkets
        self.discNumber = discNumber
        self.durationMs = durationMs
        self.explicit = explicit
        self.href = href
        self.id = id
        self.isPlayable = isPlayable
        self.name = name
        self.popularity = popularity
        self.previewUrl = previewUrl
        self.trackNumber = trackNumber
        self.type = type
        self.uri = uri
        self.isLocal = isLocal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case album
        case artists
        case availableMarkets = "available_markets"
        case discNumber = "disc_number"
        case durationMs = "duration_ms"
        case explicit
        case href
        case id
        case isPlayable = "is_playable"
        case name
        case popularity
        case previewUrl = "preview_url"
        case trackNumber = "track_number"
        case type
        case uri
        case isLocal = "is_local"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(album, forKey: .album)
        try container.encode(artists, forKey: .artists)
        try container.encodeIfPresent(availableMarkets, forKey: .availableMarkets)
        try container.encodeIfPresent(discNumber, forKey: .discNumber)
        try container.encodeIfPresent(durationMs, forKey: .durationMs)
        try container.encodeIfPresent(explicit, forKey: .explicit)
        try container.encodeIfPresent(href, forKey: .href)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(isPlayable, forKey: .isPlayable)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(popularity, forKey: .popularity)
        try container.encodeIfPresent(previewUrl, forKey: .previewUrl)
        try container.encodeIfPresent(trackNumber, forKey: .trackNumber)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(isLocal, forKey: .isLocal)
    }
}

