//
// ArtistObjectDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ArtistObjectDTO: Codable, JSONEncodable, Hashable {

    public enum TypeDTO: String, Codable, CaseIterable {
        case artist = "artist"
    }
    /** Information about the followers of the artist.  */
    public var followers: FollowersObjectDTO?
    /** A list of the genres the artist is associated with. If not yet classified, the array is empty.  */
    public var genres: [String]?
    /** A link to the Web API endpoint providing full details of the artist.  */
    public var href: String?
    /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.  */
    public var id: String
    /** Images of the artist in various sizes, widest first.  */
    public var images: [ImageObjectDTO]?
    /** The name of the artist.  */
    public var name: String
    /** The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.  */
    public var popularity: Int?
    /** The object type.  */
    public var type: TypeDTO?
    /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.  */
    public var uri: String?

    public init(followers: FollowersObjectDTO? = nil, genres: [String]? = nil, href: String? = nil, id: String, images: [ImageObjectDTO]? = nil, name: String, popularity: Int? = nil, type: TypeDTO? = nil, uri: String? = nil) {
        self.followers = followers
        self.genres = genres
        self.href = href
        self.id = id
        self.images = images
        self.name = name
        self.popularity = popularity
        self.type = type
        self.uri = uri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case followers
        case genres
        case href
        case id
        case images
        case name
        case popularity
        case type
        case uri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(followers, forKey: .followers)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(href, forKey: .href)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(popularity, forKey: .popularity)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(uri, forKey: .uri)
    }
}

