//
// SimplifiedAlbumObjectDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SimplifiedAlbumObjectDTO: Codable, JSONEncodable, Hashable {

    public enum ReleaseDatePrecisionDTO: String, Codable, CaseIterable {
        case year = "year"
        case month = "month"
        case day = "day"
    }
    public enum TypeDTO: String, Codable, CaseIterable {
        case album = "album"
    }
    /** The number of tracks in the album. */
    public var totalTracks: Int
    /** The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._  */
    public var availableMarkets: [String]
    /** A link to the Web API endpoint providing full details of the album.  */
    public var href: String
    /** The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.  */
    public var id: String
    /** The cover art for the album in various sizes, widest first.  */
    public var images: [ImageObjectDTO]
    /** The name of the album. In case of an album takedown, the value may be an empty string.  */
    public var name: String
    /** The date the album was first released.  */
    public var releaseDate: String
    /** The precision with which `release_date` value is known.  */
    public var releaseDatePrecision: ReleaseDatePrecisionDTO
    /** The object type.  */
    public var type: TypeDTO
    /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.  */
    public var uri: String
    /** The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.  */
    public var artists: [SimplifiedArtistObjectDTO]

    public init(totalTracks: Int, availableMarkets: [String], href: String, id: String, images: [ImageObjectDTO], name: String, releaseDate: String, releaseDatePrecision: ReleaseDatePrecisionDTO, type: TypeDTO, uri: String, artists: [SimplifiedArtistObjectDTO]) {
        self.totalTracks = totalTracks
        self.availableMarkets = availableMarkets
        self.href = href
        self.id = id
        self.images = images
        self.name = name
        self.releaseDate = releaseDate
        self.releaseDatePrecision = releaseDatePrecision
        self.type = type
        self.uri = uri
        self.artists = artists
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case totalTracks = "total_tracks"
        case availableMarkets = "available_markets"
        case href
        case id
        case images
        case name
        case releaseDate = "release_date"
        case releaseDatePrecision = "release_date_precision"
        case type
        case uri
        case artists
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(totalTracks, forKey: .totalTracks)
        try container.encode(availableMarkets, forKey: .availableMarkets)
        try container.encode(href, forKey: .href)
        try container.encode(id, forKey: .id)
        try container.encode(images, forKey: .images)
        try container.encode(name, forKey: .name)
        try container.encode(releaseDate, forKey: .releaseDate)
        try container.encode(releaseDatePrecision, forKey: .releaseDatePrecision)
        try container.encode(type, forKey: .type)
        try container.encode(uri, forKey: .uri)
        try container.encode(artists, forKey: .artists)
    }
}

