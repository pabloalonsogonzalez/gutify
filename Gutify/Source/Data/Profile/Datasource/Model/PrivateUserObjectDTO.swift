//
// PrivateUserObjectDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct PrivateUserObjectDTO: Codable, JSONEncodable, Hashable {

    /** The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._  */
    public var country: String?
    /** The name displayed on the user's profile. `null` if not available.  */
    public var displayName: String
    /** The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._  */
    public var email: String
    /** Information about the followers of the user. */
    public var followers: FollowersObjectDTO
    /** A link to the Web API endpoint for this user.  */
    public var href: String?
    /** The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.  */
    public var id: String?
    /** The user's profile image. */
    public var images: [ImageObjectDTO]?
    /** The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._  */
    public var product: String
    /** The object type: \"user\"  */
    public var type: String?
    /** The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.  */
    public var uri: String?

    public init(country: String? = nil, displayName: String, email: String, followers: FollowersObjectDTO, href: String? = nil, id: String? = nil, images: [ImageObjectDTO], product: String, type: String? = nil, uri: String? = nil) {
        self.country = country
        self.displayName = displayName
        self.email = email
        self.followers = followers
        self.href = href
        self.id = id
        self.images = images
        self.product = product
        self.type = type
        self.uri = uri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case country
        case displayName = "display_name"
        case email
        case followers
        case href
        case id
        case images
        case product
        case type
        case uri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(email, forKey: .email)
        try container.encode(followers, forKey: .followers)
        try container.encodeIfPresent(href, forKey: .href)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(images, forKey: .images)
        try container.encode(product, forKey: .product)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(uri, forKey: .uri)
    }
}

